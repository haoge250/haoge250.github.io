一、<mvc:annotation-driven />注解意义
主要就是为了Spring MVC来用的，提供Controller请求转发，json自动转换等功能。

<mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。
<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring
 MVC为@Controllers分发请求所必须的，即解决了@Controller注解使用的前提配置。
同时它还提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB，
读写JSON的支持（Jackson）。我们处理响应ajax请求时，就使用到了对json的支持（配置之后，在加入了jackson的core和mapper
包之后，不写配置文件也能自动转换成json）。

 <context:component-scan/>标签是告诉Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository
 等注解标记的组件。而<mvc:annotation-scan/>是告知Spring，我们启用注解驱动。然后Spring会自动为我们注册上面说到的几个
 Bean到工厂中，来处理我们的请求。



一开始我在写配置的时候，只写了<context:component-scan/>，并没有使用<mvc:annotation-driven/>，servlet拦截*.do，
.do请求可以被正确捕捉和处理。后来为了解决静态资源访问的问题，servlet改成了拦截所有请求，即/，并添加了默认的servlet，
这时候*.do请求不能被控制器捕捉了，页面错误为404。直到添加了<mvc:annotation-driven/>之后，.do请求才又能被正确捕捉和处理。

当我们需要controller返回一个map的json对象时，可以设定<mvc:annotation-driven />，

同时设定<mvc:message-converters> 标签，设定字符集和json处理类，例如：

<mvc:annotation-driven>
<mvc:message-converters>
<bean class="org.springframework.http.converter.StringHttpMessageConverter">
<property name="supportedMediaTypes">
<list>
<value>text/plain;charset=UTF-8</value>
</list></property>
</bean>
</mvc:message-converters>
</mvc:annotation-driven>

二、<context:annotation-config/> 注解
当我们需要使用BeanPostProcessor时，直接在Spring配置文件中定义这些Bean显得比较笨拙，例如：
　　使用@Autowired注解，必须事先在Spring容器中声明AutowiredAnnotationBeanPostProcessor的Bean
<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor "/>
使用 @Required注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean：
<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用
<context:annotation- config/>隐式地向 Spring容器注册AutowiredAnnotationBeanPostProcessor、Requir
edAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor以及PersistenceAnnotationBeanPos
tProcessor这4个BeanPostProcessor。如下：
<context:annotation-config/> 

另外在我们使用注解时一般都会配置扫描包路径选项：
<context:component-scan base-package="pack.pack"/>
该配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后，
即可将<context:annotation-config/>省去。但必须要配置全！以防万一，还是同时声明的好。


转原文链接：https://blog.csdn.net/qq_35029061/article/details/82945761